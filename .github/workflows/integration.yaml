name: Integration Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        goos:
          - linux
          - darwin
          - windows
        goarch:
          - arm64
          - amd64
        exclude:
          - goarch: arm64
            goos: windows
    steps:
      - name: Checkout commit
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5.0.1
        with:
          go-version-file: 'go.mod'
          check-latest: true

      - name: Build Diginfractl
        run: >
          go build -ldflags="-s -w" -o diginfractl-${{ matrix.goos }}-${{ matrix.goarch }} .
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

      - name: Create Archives
        run: |
          cp diginfractl-${{ matrix.goos }}-${{ matrix.goarch }} diginfractl
          tar -czvf diginfractl-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz diginfractl LICENSE

      - name: Upload diginfractl artifacts
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: diginfractl-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ./diginfractl-${{ matrix.goos }}-${{ matrix.goarch }}
          retention-days: 1

      - name: Upload diginfractl archives
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: diginfractl-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
          path: ./diginfractl-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
          retention-days: 1

  docker-configure:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-22.04
    outputs:
      release: ${{ steps.vars.outputs.release }}
      commit: ${{ steps.vars.outputs.commit }}
      build_date: ${{ steps.vars.outputs.build_date }}
    steps:
      - name: Set version fields
        id: vars
        run: |
          echo "release=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "commit=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

  docker-image:
    if: ${{ github.event_name == 'push' }}
    needs: docker-configure
    uses: ./.github/workflows/docker-image.yaml
    secrets: inherit
    permissions:
      contents: read
      id-token: write
    with:
      release: ${{ needs.docker-configure.outputs.release }}
      commit: ${{ needs.docker-configure.outputs.commit }}
      build_date: ${{ needs.docker-configure.outputs.build_date }}
      sign: true

  provenance-for-images-docker:
    if: ${{ github.event_name == 'push' }}
    needs: [docker-configure, docker-image]
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: docker.io/diginfra/diginfractl
      # The image digest is used to prevent TOCTOU issues.
      # This is an output of the docker/build-push-action
      # See: https://github.com/slsa-framework/slsa-verifier#toctou-attacks
      digest: ${{ needs.docker-image.outputs.digest }}
    secrets:
      registry-username: ${{ secrets.DOCKERHUB_USER }}
      registry-password: ${{ secrets.DOCKERHUB_SECRET }}

  login-to-amazon-ecr:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout commit
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
  
      - name: Setup Go
        uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5.0.1
        with:
          go-version-file: 'go.mod'
          check-latest: true
  
      - name: Run tests
        run: go test -cover ./...
